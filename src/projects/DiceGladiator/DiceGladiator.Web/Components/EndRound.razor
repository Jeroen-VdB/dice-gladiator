@using DiceGladiator.Web.Pages;
@inject GameService GameService;
@inject NavigationManager NavigationManager;

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Defeated by:</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<button type="button" class="btn btn-danger" @onclick="() => ConfirmEndRound(null)">No one :(</button><br>
				@foreach(var player in GameService.Players)
				{
					<button type="button" class="btn btn-primary" @onclick="() => ConfirmEndRound(player)">@player.Name</button><br>
				}
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Cancel</button>
			</div>
		</div>
	</div>
</div>

@if (ShowBackdrop)
{
	<div class="modal-backdrop fade show"></div>
}

@code {
	private string? SelectedPlayerName { get; set; }

	[Parameter]
	public EventCallback NextRound { get; set; }

	public Guid Guid = Guid.NewGuid();
	public string ModalDisplay = "none;";
	public string ModalClass = "";
	public bool ShowBackdrop = false;

	public void Open()
	{
		ModalDisplay = "block;";
		ModalClass = "Show";
		ShowBackdrop = true;
		StateHasChanged();
	}

	public void Close()
	{
		ModalDisplay = "none";
		ModalClass = "";
		ShowBackdrop = false;
		StateHasChanged();
	}

	public async Task ConfirmEndRound(Player? player)
	{
		GameService.NextEnemy(player);
		await NextRound.InvokeAsync();
		Close();
	}
}
