@page "/"
@using System.Text.Json;
@inject GameService GameService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject NavigationManager NavigationManager;
@inject ILogger<Game> logger;

<PageTitle>Dice Gladiator</PageTitle>

<CascadingValue Value="GameService">

	<MudGrid Justify="Justify.Center">
		<EnemyDisplay @ref="EnemyDisplay" />

		<EndRound @ref="EndRoundModal" NextRound="Refresh" />

		<MudItem xs="12" Class="d-flex flex-column align-center">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@EndRoundModal.Open">Fight</MudButton>
		</MudItem>

		<Leaderboard @ref="Leaderboard" />
	</MudGrid>
</CascadingValue>

@code {
	private EnemyDisplay? EnemyDisplay { get; set; }
	private EndRound? EndRoundModal { get; set; }
	private Leaderboard? Leaderboard { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (GameService.Players.Any())
			return;

		var gameSession = await localStorage.GetItemAsync<GameService>("gameSession");

		if (gameSession != null)
		{
			GameService.ResumePreviousGame(gameSession);

			logger.LogInformation("GameSession: {gamesession}", JsonSerializer.Serialize(gameSession));
			logger.LogInformation("GameService: {GameService}", JsonSerializer.Serialize(GameService));
		}
		else
		{
			NavigationManager.NavigateTo("new-game");
		}
	}

	private void Refresh()
	{
		//Trigger Direct State Change
		logger.LogInformation("NextEnemy: {nextEnemy}", JsonSerializer.Serialize(GameService.CurrentEnemy));
	}
}
