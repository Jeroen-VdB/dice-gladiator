@page "/"
@using System.Text.Json;
@inject GameService GameService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject NavigationManager NavigationManager;
@inject ILogger<Game> logger;

<PageTitle>Dice Gladiator</PageTitle>

<CascadingValue Value="GameService">

	<MudGrid Justify="Justify.Center">
		@if (GameService.RoundLimitReached())
		{
			<MudItem xs="12">
				<MudPaper Class="d-flex align-center justify-center mud-width-full py-4 pa-4">
					<Winner />
				</MudPaper>
			</MudItem>
		}
		else
		{
			
		<MudItem xs="12">
			<MudPaper Class="d-flex align-center justify-center mud-width-full py-4 pa-4">
				<EnemyDisplay @ref="EnemyDisplay" />
			</MudPaper>
		</MudItem>

		<MudItem xs="12">
			<MudPaper Class="d-flex align-center justify-center mud-width-full py-4 pa-4">
				<PlayerFight @ref="PlayerFight" NextRound="Refresh" />
			</MudPaper>
			</MudItem>
		}

		<MudItem xs="12">
			<MudPaper Class="d-flex align-center justify-center mud-width-full py-4 pa-4">
				<Leaderboard @ref="Leaderboard" />
			</MudPaper>
		</MudItem>
	</MudGrid>
</CascadingValue>

@code {
	private EnemyDisplay? EnemyDisplay { get; set; }
	private PlayerFight? PlayerFight { get; set; }
	private Leaderboard? Leaderboard { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (GameService.Players.Any())
			return;

		var gameSession = await localStorage.GetItemAsync<GameService>("gameSession");

		if (gameSession != null)
		{
			GameService.ResumePreviousGame(gameSession);

			logger.LogInformation("GameSession: {gamesession}", JsonSerializer.Serialize(gameSession));
			logger.LogInformation("GameService: {GameService}", JsonSerializer.Serialize(GameService));
		}
		else
		{
			NavigationManager.NavigateTo("new-game");
		}
	}

	private void Refresh()
	{
		StateHasChanged();
		//Trigger Direct State Change
		logger.LogInformation("NextEnemy: {nextEnemy}", JsonSerializer.Serialize(GameService.CurrentEnemy));
	}
}
